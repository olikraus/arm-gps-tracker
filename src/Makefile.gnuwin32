#
#  Generic and Simple GNU ARM Makefile (gnuwin32)
#  for http://gnuwin32.sourceforge.net/packages/make.htm
#
#  Desinged for the gnu-arm-none-eabi tool chain
#
#  "c:\Program Files (x86)\GnuWin32\bin\make.exe"
#
# 	Features
#		- create hex file
#		- create assembler listing (.dis)
#
#	Limitations
#		- only C-files supported
#		- no automatic dependency checking (call 'make clean' if any .h files are changed)
#
#	Targets:
#		make
#			create hex file, no upload
#		make upload
#			create and upload hex file (does not reliably work, use the flashmagic GUI)
#		make clean
#			delete all generated files
#
#  Note:
#  	Display list make database: make -p -f/dev/null | less
#
#================================================
#
#  Instructions
#  
#  From
#  	http://gnuwin32.sourceforge.net/packages/make.htm
#  download and execute
#  	setup 
#  for "make" ("Complete package, except sources")
#  The rest of this sections assumes, that make has been installed at the default location.
#  
#  From 
#    https://launchpad.net/gcc-arm-embedded/
#  download and execute the
#    Windows installer
#  The rest of this sections assumes, that gcc-arm-embedded has been installed here:
#    C:\Program Files (x86)\GNU Tools ARM Embedded\
#  
#  In order to flash the ARM controller via UART interface (attached to a FTDI USB/UART converter),
#  download and install the virtual com port (VCP) driver:
#  	http://www.ftdichip.com/Drivers/VCP.htm
#  
#  The flash procedure can be done with "flashmagic".
#  Download and install:
#  	http://www.flashmagictool.com/
#  
#  Unzip arm-gps-tracker sources into an empty folder (c:\arm-gps-tracker).
#  
#  Start "cmd.exe" 
#  
#  cd c:\arm-gps-tracker\src\
#  
#  "c:\Program Files (x86)\GnuWin32\bin\make.exe" -f Makefile.gnuwin32
#  
#  Expect some delay during linking phase. The .hex file is placed in the same directory.
#  Call flashmagic
#  - select the correct uC, 
#  - load the .hex file, 
#  - enable "Erase blocks used by flashfile" and
#  - put your uC into programming mode (pull ISP pin low and reset the device)
#  before starting the flash procedure.
#  
#================================================
# External tools

# The base directory of gcc-arm-none-eabi
GCCPATH:="c:\Program Files (x86)\GNU Tools ARM Embedded"

#================================================
# Project Information

# The name for the project
TARGETNAME:=arm-gps-tracker

# The source files of the project
SRC:=$(wildcard *.c)


# The CPU architecture (will be used for -mcpu)
MCPU:=cortex-m0

# The name of the startup file which matches to the architecture (MCPU)
# Usually this can be taken from
# gcc-arm-none-eabi-4_7-2013q1/share/gcc-arm-none-eabi/samples/startup
# STARTUP:=$(GCCPATH)/share/gcc-arm-none-eabi/samples/startup/startup_ARMCM0.S
STARTUP:=$(wildcard *.S)

# Include directory for the system include files
#SYSINC:=../common
#SYSSRC:=$(wildcard ../common/*.c)

# Name of the linker script (must be the "keep" script, because the other script is not always working)
LDSCRIPT:=$(wildcard *.ld)

#================================================
# Main part of the Makefile starts here. Usually no changes are needed.

# Internal Variable Names
ELFNAME:=$(TARGETNAME).elf
HEXNAME:=$(TARGETNAME).hex
DISNAME:=$(TARGETNAME).dis
MAPNAME:=$(TARGETNAME).map
OBJ:=$(SRC:.c=.o) $(SYSSRC:.c=.o) $(U8GSRC:.c=.o) $(STARTUP:.S=.o)

# Replace standard build tools by avr tools
CC:=$(GCCPATH)\bin\arm-none-eabi-gcc
AR:=$(GCCPATH)\bin\arm-none-eabi-ar
AS:=$(GCCPATH)\bin\arm-none-eabi-gcc
OBJCOPY:=$(GCCPATH)\bin\arm-none-eabi-objcopy
OBJDUMP:=$(GCCPATH)\bin\arm-none-eabi-objdump
SIZE:=$(GCCPATH)\bin\arm-none-eabi-size

# Common flags
COMMON_FLAGS = -mthumb -mcpu=$(MCPU)
COMMON_FLAGS += -Wall -I. 
# 13 Nov 2013: Internal measure 824 Bytes --> 0x0600=1536
COMMON_FLAGS += -D__STACK_SIZE=0x0600
COMMON_FLAGS += -Os -flto 
COMMON_FLAGS += -ffunction-sections -fdata-sections
# Assembler flags
ASFLAGS:=$(COMMON_FLAGS) -D__STARTUP_CLEAR_BSS -D__START=main
# C flags
CFLAGS:=$(COMMON_FLAGS) -std=gnu99
# LD flags
GC:=-Wl,--gc-sections
MAP:=-Wl,-Map=$(MAPNAME)
LFLAGS:=$(COMMON_FLAGS) $(GC) $(MAP)
LDLIBS:=--specs=nano.specs -lc -lc -lnosys -T $(LDSCRIPT)

# Additional Suffixes
.SUFFIXES: .elf .hex .dis

# Targets
.PHONY: all
all: $(DISNAME) $(HEXNAME)
	$(SIZE) $(ELFNAME)

.PHONY: clean
clean:
	del *.o *.hex *.elf *.dis *.map
#	$(HEXNAME) $(ELFNAME) $(DISNAME) $(MAPNAME)

# implicit rules
.S.o:
	$(PREPROCESS.S) $(COMMON_FLAGS) $(patsubst %.s,%.S,$<) > tmp.s
	$(COMPILE.s) -c -o $@ tmp.s
	del tmp.s

.elf.hex:
	@$(OBJCOPY) -O ihex $< $@

# explicit rules
$(ELFNAME): $(OBJ) 
	$(LINK.o) $(LFLAGS) $(OBJ) $(LDLIBS) -o $@

$(DISNAME): $(ELFNAME)
	$(OBJDUMP) -S $< > $@

	
